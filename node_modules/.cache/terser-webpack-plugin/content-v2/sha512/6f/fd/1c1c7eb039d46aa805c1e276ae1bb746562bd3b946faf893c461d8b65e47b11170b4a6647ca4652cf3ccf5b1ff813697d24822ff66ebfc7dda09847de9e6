{"map":"{\"version\":3,\"sources\":[\"/Users/edartopete/Desktop/code/homework/memorygame/src/components/cards.js\",\"/Users/edartopete/Desktop/code/homework/memorygame/src/App.js\",\"/Users/edartopete/Desktop/code/homework/memorygame/src/serviceWorker.js\",\"/Users/edartopete/Desktop/code/homework/memorygame/src/index.js\"],\"names\":[\"guess\",\"shuffleArray\",\"arr\",\"sort\",\"Math\",\"random\",\"Cards\",\"state\",\"cards\",\"score\",\"topScore\",\"message\",\"handleOnClick\",\"elem\",\"sArray\",\"_this\",\"key\",\"target\",\"id\",\"includes\",\"setState\",\"push\",\"_this$state\",\"newScore\",\"newTopScore\",\"_this2\",\"this\",\"card\",\"map\",\"i\",\"react_default\",\"a\",\"createElement\",\"className\",\"onClick\",\"src\",\"alt\",\"href\",\"Component\",\"App\",\"components_cards\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"yNAGIA,SAAM,IAEJC,EAAe,SAAAC,GAAG,OAAIA,EAAIC,KAAK,WAAA,OAAMC,KAAKC,SAAW,MAiF5CC,6MA/EXC,MAAQ,CACJC,MAAO,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,MACtDC,MAAM,EACNC,SAAS,EACTC,QAAO,mEAIXC,cAAgB,SAAAC,GAEZ,IAAMC,EAASb,EAAac,EAAKR,MAAMC,OACjCQ,EAAMH,EAAKI,OAAOC,GAExB,GAAGlB,EAAMmB,SAASH,GAEd,OADAhB,EAAM,GACCe,EAAKK,SAAS,CAC7BZ,MAAOP,EAAaa,GACpBH,QAAS,YACTF,MAAO,IAGCT,EAAMqB,KAAKL,GADV,IAAAM,EAE2BP,EAAKR,MAAzBG,EAFPY,EAEOZ,SACFa,EAHLD,EAEiBb,MACO,EACnBe,EAAcD,EAAWb,EAAWa,EAAWb,EAC9D,OAAOK,EAAKK,SAAS,CACpBZ,MAAMP,EAAaa,GACnBH,QAAS,eACTF,MAAOc,EACPb,SAAUc,6EAKD,IAAAC,EAAAC,KAECC,EAAOD,KAAKnB,MAAMC,MAAMoB,IAAI,SAACpB,EAAMqB,GACrC,OAEQC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAW,SAASjB,IAAKR,EAAO0B,QAAST,EAAKb,eACnDkB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,0BACXH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,MAAA,CAAKG,IAAK,SAAS3B,EAAM,QAAS4B,IAAI,GAAGlB,GAAIV,SAQjE,OACIsB,EAAAC,EAAAC,cAAA,MAAA,KAGAF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAY,gBACjBH,EAAAC,EAAAC,cAAA,MAAA,KACIF,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,kCACXH,EAAAC,EAAAC,cAAA,IAAA,CAAGK,KAAK,KAAKJ,UAAU,cAAvB,eACAH,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,8BACVH,EAAAC,EAAAC,cAAA,KAAA,KAAIF,EAAAC,EAAAC,cAAA,OAAA,CAAMC,UAAU,eAAeP,KAAKnB,MAAMI,UAC9CmB,EAAAC,EAAAC,cAAA,KAAA,KAAIF,EAAAC,EAAAC,cAAA,OAAA,CAAMC,UAAU,eAAhB,UAAsCP,KAAKnB,MAAME,MAAjD,iBAAsEiB,KAAKnB,MAAMG,eAKjGoB,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,OAEVN,YArEGW,EAAAA,WCOLC,IAAAA,EATf,WAEE,OACET,EAAAC,EAAAC,cAAA,MAAA,KACMF,EAAAC,EAAAC,cAACQ,EAAD,QCIUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOjB,EAAAC,EAAAC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React, { Component } from 'react';\\nimport '../App.css';\\n\\nvar guess=[];\\n\\nconst shuffleArray = arr => arr.sort(() => Math.random() - 0.5);\\nclass Cards extends Component {\\n    state = {\\n        cards: ['1','2','3','4','5','6','7','8','9','10','11','12'],\\n        score:0,\\n        topScore:0,\\n        message:`Click a Character but don't do it twice because you will lose`\\n\\n    };\\n\\n    handleOnClick = elem => {\\n    \\n        const sArray = shuffleArray(this.state.cards);\\n        const key = elem.target.id;\\n        \\n        if(guess.includes(key)){\\n            guess=[];\\n            return this.setState({\\n\\t\\t\\t\\tcards: shuffleArray(sArray),\\n\\t\\t\\t\\tmessage: 'You lose!',\\n\\t\\t\\t\\tscore: 0\\n\\t\\t\\t})\\n        }else{\\n            guess.push(key);\\n            const { topScore, score } = this.state;\\n            const newScore = score + 1;\\n            const newTopScore = newScore > topScore ? newScore : topScore;\\n\\t\\t\\treturn this.setState({\\n\\t\\t\\t\\tcards:shuffleArray(sArray) ,\\n\\t\\t\\t\\tmessage: 'You Guessed!',\\n\\t\\t\\t\\tscore: newScore,\\n\\t\\t\\t\\ttopScore: newTopScore,\\n\\t\\t\\t})\\n        }\\n      };\\n    \\n    render() {\\n        \\n        const card = this.state.cards.map((cards,i) => {\\n            return(\\n                    \\n                    <div className =\\\"col s3\\\" key={cards} onClick={this.handleOnClick}>\\n                    <div className=\\\"Card z-depth-3 section\\\" >\\n                        <div className=\\\"card-image\\\">\\n                            <img src={\\\"./img/\\\"+cards+\\\".jpeg\\\"} alt=\\\"\\\" id={cards}></img>\\n                        </div>\\n                    </div>\\n                    </div>\\n                \\n            \\n            )            \\n        })\\n        return (\\n            <div>\\n\\n            \\n            <div className = \\\"navbar-fixed\\\" >\\n            <nav>\\n                <div className=\\\"nav-wrapper blue-grey darken-4\\\">\\n                    <a href=\\\"#!\\\" className=\\\"brand-logo\\\">Memory Game</a>\\n                    <ul className=\\\"right hide-on-med-and-down\\\">\\n                        <li><span className=\\\"badge white\\\">{this.state.message}</span></li>\\n                        <li><span className=\\\"badge white\\\">Score: {this.state.score} | Top Score: {this.state.topScore}</span></li>\\n                    </ul>\\n                </div>\\n            </nav>\\n            </div >\\n            <div className=\\\"container\\\">\\n            <div className=\\\"row\\\">\\n                \\n                {card}\\n            </div>\\n            </div>\\n            \\n            </div>\\n            \\n            \\n        );\\n    }\\n}\\n\\nexport default Cards;\\n\\n\",\"import React from 'react';\\nimport Card from \\\"./components/cards\\\"\\n\\n\\nfunction App() {\\n\\n  return (\\n    <div >  \\n          <Card />    \\n    </div>\\n  );\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{14:function(e,a,t){},15:function(e,a,t){},16:function(e,a,t){\"use strict\";t.r(a);var n=t(0),r=t.n(n),c=t(2),s=t.n(c),o=(t(14),t(3)),l=t(4),i=t(6),m=t(5),d=t(7),u=(t(15),[]),h=function(e){return e.sort(function(){return Math.random()-.5})},v=function(e){function a(){var e,t;Object(o.a)(this,a);for(var n=arguments.length,r=new Array(n),c=0;c<n;c++)r[c]=arguments[c];return(t=Object(i.a)(this,(e=Object(m.a)(a)).call.apply(e,[this].concat(r)))).state={cards:[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\"],score:0,topScore:0,message:\"Click a Character but don't do it twice because you will lose\"},t.handleOnClick=function(e){var a=h(t.state.cards),n=e.target.id;if(u.includes(n))return u=[],t.setState({cards:h(a),message:\"You lose!\",score:0});u.push(n);var r=t.state,c=r.topScore,s=r.score+1,o=s>c?s:c;return t.setState({cards:h(a),message:\"You Guessed!\",score:s,topScore:o})},t}return Object(d.a)(a,e),Object(l.a)(a,[{key:\"render\",value:function(){var e=this,a=this.state.cards.map(function(a,t){return r.a.createElement(\"div\",{className:\"col s3\",key:a,onClick:e.handleOnClick},r.a.createElement(\"div\",{className:\"Card z-depth-3 section\"},r.a.createElement(\"div\",{className:\"card-image\"},r.a.createElement(\"img\",{src:\"./img/\"+a+\".jpeg\",alt:\"\",id:a}))))});return r.a.createElement(\"div\",null,r.a.createElement(\"div\",{className:\"navbar-fixed\"},r.a.createElement(\"nav\",null,r.a.createElement(\"div\",{className:\"nav-wrapper blue-grey darken-4\"},r.a.createElement(\"a\",{href:\"#!\",className:\"brand-logo\"},\"Memory Game\"),r.a.createElement(\"ul\",{className:\"right hide-on-med-and-down\"},r.a.createElement(\"li\",null,r.a.createElement(\"span\",{className:\"badge white\"},this.state.message)),r.a.createElement(\"li\",null,r.a.createElement(\"span\",{className:\"badge white\"},\"Score: \",this.state.score,\" | Top Score: \",this.state.topScore)))))),r.a.createElement(\"div\",{className:\"container\"},r.a.createElement(\"div\",{className:\"row\"},a)))}}]),a}(n.Component);var p=function(){return r.a.createElement(\"div\",null,r.a.createElement(v,null))};Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));s.a.render(r.a.createElement(p,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})},8:function(e,a,t){e.exports=t(16)}},[[8,1,2]]]);","extractedComments":[]}